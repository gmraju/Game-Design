using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Control code for the the player's game object.
/// Very approximate simulation of flight dynamics.
/// </summary>
public class PlayerControl : MonoBehaviour {
    /// <summary>
    /// Coefficient of draft for head winds
    /// </summary>
    [Header("Aerodynamic coefficients")]
    public float ForwardDragCoefficient = 0.01f;
    /// <summary>
    /// Drag coefficient for winds blowing up/down across wings
    /// </summary>
    public float VerticalDragCoefficient = 0.5f;
    /// <summary>
    /// Lift generated by the wings
    /// </summary>
    public float LiftCoefficient = 0.01f;

    /// <summary>
    /// How far the plane can tilt around the X axis
    /// </summary>
    [Header("Movement Speeds")]
    public float PitchRange = 45f;
    /// <summary>
    /// How far the plane can rotate about the Z axis
    /// </summary>
    public float RollRange = 45f;
    /// <summary>
    /// How fast the plane yaws for a given degree of roll.
    /// </summary>
    public float RotationalSpeed = 5f;
    /// <summary>
    /// Thrust generated when the throttle is pulled back all the way.
    /// </summary>
    public float MaximumThrust = 20f;

    /// <summary>
    /// Text element for displaying status information
    /// </summary>
    [Header("HUD")]
    public Text StatusDisplay;
    /// <summary>
    /// Text element for displaying game-over text
    /// </summary>
    public Text GameOverText;

    /// <summary>
    /// Cached copy of the player's RigidBody component
    /// </summary>
    private Rigidbody playerRB;

    private float current_velocity;

    /// <summary>
    /// Magic layer mask code for the updraft(s)
    /// </summary>
    const int UpdraftLayerMask = 1 << 8;



    #region Internal flight state
    /// <summary>
    /// Current yaw (rotation about the Y axis)
    /// </summary>
    private float yaw;
    /// <summary>
    /// Current pitch (rotation about the X axis)
    /// </summary>
    private float pitch;
    /// <summary>
    /// Current roll (rotation about the Z axis)
    /// </summary>
    private float roll;
    /// <summary>
    /// Current thrust (forward force provided by engines
    /// </summary>
    private float thrust;
#endregion

    /// <summary>
    /// Initialize component
    /// </summary>
    internal void Start() {
        playerRB = GetComponent<Rigidbody>();
        playerRB.velocity = transform.forward*3;
    }

    /// <summary>
    /// Show game-over display
    /// </summary>
    /// <param name="safe">True if we won, false if we crashed</param>
    private void OnGameOver(bool safe) {
        playerRB.velocity = Vector3.zero;
        playerRB.useGravity = false;
        playerRB.constraints = RigidbodyConstraints.FreezeAll;
        if (safe) {
            GameOverText.text = "You Win!";
        } else {
            GameOverText.text = "OOPS";
        }
    }

    /// <summary>
    /// Display status information
    /// </summary>
    internal void OnGUI()
    {
        StatusDisplay.text = string.Format("Speed: {0:00.00}    altitude: {1:00.00}    Thrust {2:0.0}",
            playerRB.velocity.magnitude,
            transform.position.y,
            thrust);
    }


    internal void FixedUpdate()
    {
        roll = Mathf.Lerp(roll, RollRange * Input.GetAxis("Horizontal"), 0.01f);
        pitch = Mathf.Lerp(pitch, PitchRange * Input.GetAxis("Vertical"), 0.01f);
        yaw += -roll * RotationalSpeed * Time.deltaTime;

        Quaternion new_rotation = Quaternion.identity * Quaternion.Euler(pitch, yaw, roll);
        playerRB.MoveRotation(new_rotation);

        float thrust_new = MaximumThrust * Input.GetAxis("Thrust");
        if (thrust_new > 0)
        {
            thrust = thrust_new;
            playerRB.AddForce(transform.forward * thrust);
        }


        Vector3 vrel = -playerRB.velocity;
        Collider[] sphere = Physics.OverlapSphere(transform.position, 0.5f, UpdraftLayerMask);
        if (sphere.Length != 0)
           vrel = sphere[0].gameObject.GetComponent<Updraft>().WindVelocity - playerRB.velocity;

        current_velocity = playerRB.velocity.magnitude;

        float vf = Vector3.Dot(transform.forward, vrel);
        playerRB.AddForce(Mathf.Pow(vf, 2f) * transform.up * LiftCoefficient);

        float fd = Mathf.Sign(vf) * ForwardDragCoefficient * Mathf.Pow(vf, 2f);
        playerRB.AddForce(fd * transform.forward);

        float vup = Vector3.Dot(vrel, transform.up);
        float nd = Mathf.Sign(vup) * VerticalDragCoefficient * Mathf.Pow(vup, 2f);
        playerRB.AddForce(nd * transform.up);




    }


    internal void OnCollisionEnter(Collision collision)
    {
        if ((playerRB.useGravity == true) && (collision.gameObject.name == "LandingPlatform") && 
            (current_velocity < collision.gameObject.GetComponent<LandingPlatform>().MaxLandingSpeed))
        {
            OnGameOver(true);
        }
        else
            OnGameOver(false);
        
    }
}
